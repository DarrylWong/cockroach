// Copyright 2024 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.ficontroller;
option go_package = "github.com/cockroachdb/cockroach/pkg/ficontroller";

import "gogoproto/gogo.proto";

// A UploadFailureInjectionPlanRequest ...
message UploadFailureInjectionPlanRequest {
  bytes failure_plan = 1 [(gogoproto.customname) = "FailurePlan"];
  bool static = 2 [(gogoproto.customname) = "StaticPlan"];
}

message UploadFailureInjectionPlanResponse {
  string failure_plan_id = 1 [(gogoproto.customname) = "PlanID"];
}

message StartFailureInjectionRequest {
  string failure_plan_id = 1 [(gogoproto.customname) = "PlanID"];
}

message StartFailureInjectionResponse {
}

message StopFailureInjectionRequest {
  string failure_plan_id = 1 [(gogoproto.customname) = "PlanID"];
}

message StopFailureInjectionResponse {
}

message ClusterInfo {
  int32 cluster_size = 1 [(gogoproto.customname) = "ClusterSize"];
  // TODO: this should be a list of connection strings, one for each node in the cluster
  string connection_string = 2 [(gogoproto.customname) = "ConnectionString"];
}

message UpdateClusterStateRequest {
  string failure_plan_id = 1 [(gogoproto.customname) = "PlanID"];
  map<string, ClusterInfo> cluster_state = 2 [(gogoproto.customname) = "ClusterState"];
}

message UpdateClusterStateResponse {
}

message GetFailurePlanStatusRequest {
  string failure_plan_id = 1 [(gogoproto.customname) = "PlanID"];
}

message GetFailurePlanStatusResponse {
  string status = 1 [(gogoproto.customname) = "PlanStatus"];
  map<string, ClusterInfo> cluster_state = 2 [(gogoproto.customname) = "ClusterState"];
  bytes failure_plan = 3 [(gogoproto.customname) = "FailurePlan"];
}

message GetFailurePlanLogsRequest {
  string failure_plan_id = 1 [(gogoproto.customname) = "PlanID"];
}

message GetFailurePlanLogsResponse {
  bytes logs = 1 [(gogoproto.customname) = "Logs"];
}

service Controller {
  rpc UploadFailureInjectionPlan (UploadFailureInjectionPlanRequest) returns (UploadFailureInjectionPlanResponse) {}
  rpc StartFailureInjection (StartFailureInjectionRequest) returns (StartFailureInjectionResponse) {}
  rpc StopFailureInjection (StopFailureInjectionRequest) returns (StopFailureInjectionResponse) {}
  rpc UpdateClusterState (UpdateClusterStateRequest) returns (UpdateClusterStateResponse) {}
  rpc GetFailurePlanStatus (GetFailurePlanStatusRequest) returns (GetFailurePlanStatusResponse) {}
  rpc GetFailurePlanLogs (GetFailurePlanLogsRequest) returns (GetFailurePlanLogsResponse) {}
}
